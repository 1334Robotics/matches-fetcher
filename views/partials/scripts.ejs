<script>
  function toggleMatch(matchId) {
    const card = document.getElementById(matchId);
    card.classList.toggle('active');
    saveOpenMatches();
  }
  
  function saveOpenMatches() {
    const openMatches = Array.from(document.querySelectorAll('.match-card.active')).map(card => card.id);
    localStorage.setItem('openMatches', JSON.stringify(openMatches));
  }
  
  function restoreOpenMatches() {
    const stored = localStorage.getItem('openMatches');
    if (stored) {
      const openMatches = JSON.parse(stored);
      openMatches.forEach(matchId => {
        const card = document.getElementById(matchId);
        if (card) card.classList.add('active');
      });
    }
  }
  
  // Find the next match card (first non-completed match)
  function findNextMatchCard() {
    // First check for Currently Playing matches
    let matchGroups = document.querySelectorAll('.match-group');
    for (const group of matchGroups) {
      const groupTitle = group.querySelector('.match-group-title');
      if (groupTitle && groupTitle.textContent.includes('Currently Playing')) {
        const cards = group.querySelectorAll('.match-card');
        if (cards.length > 0) return cards[0];
      }
    }
    
    // Then check for Next Up matches
    for (const group of matchGroups) {
      const groupTitle = group.querySelector('.match-group-title');
      if (groupTitle && groupTitle.textContent.includes('Next Up')) {
        const cards = group.querySelectorAll('.match-card');
        if (cards.length > 0) return cards[0];
      }
    }
    
    // Finally check for any non-completed match
    const allMatchCards = document.querySelectorAll('.match-card');
    for (const card of allMatchCards) {
      if (!card.closest('.match-group').querySelector('.match-group-title').textContent.includes('Completed')) {
        return card;
      }
    }
    
    return null;
  }
  
  // Auto-open the next match card
  function openNextMatchCard() {
    const nextMatchCard = findNextMatchCard();
    if (nextMatchCard) {
      console.log('Found next match card:', nextMatchCard.id);
      nextMatchCard.classList.add('active');
      saveOpenMatches();
      
      // Scroll to the next match card
      nextMatchCard.scrollIntoView({ behavior: 'smooth', block: 'center' });
      return nextMatchCard;
    } else {
      console.log('No next match card found');
      return null;
    }
  }
  
  // Collapse all match cards except for the next match
  function collapseOtherMatchCards(nextMatchCard) {
    if (!nextMatchCard) return;
    
    console.log('Collapsing matches except:', nextMatchCard.id);
    const allMatchCards = document.querySelectorAll('.match-card.active');
    allMatchCards.forEach(card => {
      if (card.id !== nextMatchCard.id) {
        card.classList.remove('active');
      }
    });
    saveOpenMatches();
  }
  
  let currentDataHash = "";
  let checkInterval = 10000; // 10 seconds interval
  let updateTimer;
  let serverTimeOffset = 0; // Store the difference between server and client time
  let collapseTimer; // Timer for collapsing other match cards
  
  // Check if client clock is synchronized with EST
  function checkClockSync(serverTimestamp) {
    const clientTime = Date.now();
    const timeDiff = Math.abs(clientTime - serverTimestamp);
    
    if (timeDiff > 5000) { // More than 5 seconds difference
      console.log(`Clock desync detected: ${timeDiff}ms difference`);
      serverTimeOffset = serverTimestamp - clientTime;
      
      // Add a warning to the UI
      const updateStatus = document.getElementById('update-status');
      if (updateStatus) {
        updateStatus.innerHTML += ` <span style="color: #ff9800;">(Clock desync detected: ${Math.round(timeDiff/1000)}s)</span>`;
      }
      
      // Update any time displays that might be on the page
      updateSyncedClock();
      return false;
    }
    return true;
  }
  
  // Get the current time adjusted for any server-client difference
  function getSyncedTime() {
    return new Date(Date.now() + serverTimeOffset);
  }
  
  // Update any clock elements on the page with the synced time
  function updateSyncedClock() {
    const clockTime = document.getElementById('clock-time');
    const clockDate = document.getElementById('clock-date');
    
    if (clockTime && clockDate) {
      const syncedNow = getSyncedTime();
      
      clockTime.textContent = syncedNow.toLocaleTimeString('en-US', {
        hour: 'numeric',
        minute: '2-digit',
        second: '2-digit',
        hour12: true,
        timeZone: 'Canada/Eastern'
      });
      
      clockDate.textContent = syncedNow.toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        timeZone: 'Canada/Eastern'
      });
    }
  }
  
  async function checkForUpdates() {
    const updateStatus = document.getElementById('update-status');
    const hashDisplay = document.getElementById('hash-display');
    try {
      updateStatus.innerHTML = 'Checking for updates...';
      const response = await fetch('/api/data-check?eventKey=' + encodeURIComponent('<%= eventKey %>') 
        + '&teamKey=' + encodeURIComponent('<%= formattedTeamKey %>') 
        + '&lastUpdate=' + currentDataHash);
      const data = await response.json();
      
      // Check clock sync using server timestamp
      if (data.timestamp) {
        checkClockSync(data.timestamp);
      }
      
      if (data.changed) {
        saveOpenMatches();
        updateStatus.innerHTML = 'New data available! Refreshing...';
        setTimeout(() => window.location.reload(), 500);
      } else {
        currentDataHash = data.hash;
        const shortHash = currentDataHash.substring(0, 8);
        const lastChecked = getSyncedTime().toLocaleTimeString();
        updateStatus.innerHTML = 'Data provided by FIRST Nexus & TBA APIs • Last updated: ' + getSyncedTime().toLocaleString() + ' • Last checked: ' + lastChecked;
        hashDisplay.innerHTML = 'Hash: ' + shortHash;
        updateTimer = setTimeout(checkForUpdates, checkInterval);
      }
    } catch (error) {
      console.error('Error checking for updates:', error);
      updateStatus.innerHTML = 'Update check failed. Retrying soon...';
      updateTimer = setTimeout(checkForUpdates, checkInterval * 2);
    }
  }
  
  // Initialize auto-opening functionality
  function initializeMatchDisplay() {
    console.log('Initializing match display behavior');
    
    // Clear any existing collapse timer
    if (collapseTimer) {
      clearTimeout(collapseTimer);
    }
    
    // Automatically open the next match card
    const nextMatchCard = openNextMatchCard();
    
    // Removed the auto-collapse timer to keep all cards expanded
    // as per the user's request
  }
  
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM fully loaded');
    
    // First restore any previously open matches
    // We're not doing this anymore to ensure our auto-open logic works cleanly
    // restoreOpenMatches();
    
    // Wait a short time to ensure all elements are fully rendered
    setTimeout(() => {
      initializeMatchDisplay();
    }, 100);
    
    setTimeout(checkForUpdates, 1000);
    
    // Start clock updates
    updateSyncedClock();
    setInterval(updateSyncedClock, 1000);
    
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'visible') {
        clearTimeout(updateTimer);
        checkForUpdates();
      }
    });
  });
</script>